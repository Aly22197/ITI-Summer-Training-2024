{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aly\\\\Desktop\\\\Crowdfunding\\\\crowdfunding\\\\crowdfunding-dapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { BrowserProvider, Contract, parseEther, formatEther } from 'ethers';\nimport { contractAbi } from './Constant/constant.js';\nimport { contractAddress } from './Constant/constant.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [fundingAmount, setFundingAmount] = useState(\"\");\n  const [fundsRaised, setFundsRaised] = useState(\"0\");\n  useEffect(() => {\n    const init = async () => {\n      // Check if MetaMask is installed\n      if (window.ethereum) {\n        const browserProvider = new BrowserProvider(window.ethereum);\n        setProvider(browserProvider);\n        const signer = await browserProvider.getSigner();\n        setSigner(signer);\n        const contract = new Contract(contractAddress, contractAbi, signer);\n        setContract(contract);\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setCurrentAccount(accounts[0]);\n      } else {\n        console.log(\"Please install MetaMask!\");\n      }\n    };\n    init();\n  }, []);\n  const handleTransaction = async () => {\n    if (!signer || !contract) return;\n    try {\n      const valueInEther = parseEther(fundingAmount); // Use parseEther directly\n      const transactionHash = await signer.sendTransaction({\n        to: contractAddress,\n        value: valueInEther\n      });\n      console.log('Transaction Hash:', transactionHash);\n\n      // Optionally update the funds raised state\n      const fundsRaised = await contract.fundsRaised(); // Assuming this is a method in your smart contract\n      setFundsRaised(formatEther(fundsRaised)); // Convert funds raised to Ether using formatEther\n    } catch (error) {\n      console.error(\"Transaction Error:\", error);\n    }\n  };\n  const handleInputChange = event => {\n    setFundingAmount(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Crowdfunding DApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected Account: \", currentAccount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Funds Raised: \", fundsRaised, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: fundingAmount,\n      onChange: handleInputChange,\n      placeholder: \"Enter amount to fund\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTransaction,\n      children: \"Fund Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"pp0OS6tr6MNsSLlErbS4YPuYhjk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","BrowserProvider","Contract","parseEther","formatEther","contractAbi","contractAddress","jsxDEV","_jsxDEV","App","_s","provider","setProvider","signer","setSigner","contract","setContract","currentAccount","setCurrentAccount","fundingAmount","setFundingAmount","fundsRaised","setFundsRaised","init","window","ethereum","browserProvider","getSigner","accounts","request","method","console","log","handleTransaction","valueInEther","transactionHash","sendTransaction","to","value","error","handleInputChange","event","target","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Aly/Desktop/Crowdfunding/crowdfunding/crowdfunding-dapp/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { BrowserProvider,Contract, parseEther,formatEther} from 'ethers';\nimport { contractAbi } from './Constant/constant.js';\nimport { contractAddress } from './Constant/constant.js';\n\nfunction App() {\n    const [provider, setProvider] = useState(null);\n    const [signer, setSigner] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [currentAccount, setCurrentAccount] = useState(null);\n    const [fundingAmount, setFundingAmount] = useState(\"\");\n    const [fundsRaised, setFundsRaised] = useState(\"0\");\n\n    useEffect(() => {\n        const init = async () => {\n            // Check if MetaMask is installed\n            if (window.ethereum) {\n                const browserProvider = new BrowserProvider(window.ethereum);\n                setProvider(browserProvider);\n\n                const signer = await browserProvider.getSigner();\n                setSigner(signer);\n\n                const contract = new Contract(contractAddress, contractAbi, signer);\n                setContract(contract);\n\n                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                setCurrentAccount(accounts[0]);\n            } else {\n                console.log(\"Please install MetaMask!\");\n            }\n        };\n\n        init();\n    }, []);\n\n    const handleTransaction = async () => {\n        if (!signer || !contract) return;\n\n        try {\n            const valueInEther = parseEther(fundingAmount); // Use parseEther directly\n            const transactionHash = await signer.sendTransaction({\n                to: contractAddress,\n                value: valueInEther,\n            });\n            console.log('Transaction Hash:', transactionHash);\n\n            // Optionally update the funds raised state\n            const fundsRaised = await contract.fundsRaised(); // Assuming this is a method in your smart contract\n            setFundsRaised(formatEther(fundsRaised)); // Convert funds raised to Ether using formatEther\n        } catch (error) {\n            console.error(\"Transaction Error:\", error);\n        }\n    };\n\n    const handleInputChange = (event) => {\n        setFundingAmount(event.target.value);\n    };\n\n    return (\n        <div>\n            <h1>Crowdfunding DApp</h1>\n            <p>Connected Account: {currentAccount}</p>\n            <p>Funds Raised: {fundsRaised} ETH</p>\n            <input \n                type=\"text\" \n                value={fundingAmount} \n                onChange={handleInputChange} \n                placeholder=\"Enter amount to fund\" \n            />\n            <button onClick={handleTransaction}>Fund Project</button>\n        </div>\n    );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}