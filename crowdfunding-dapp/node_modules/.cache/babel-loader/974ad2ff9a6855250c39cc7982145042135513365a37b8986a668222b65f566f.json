{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aly\\\\Desktop\\\\Crowdfunding\\\\crowdfunding\\\\crowdfunding-dapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ethers, parseEther, formatEther } from 'ethers';\nimport { contractAbi } from './Constant/constant.js';\nimport { contractAddress } from './Constant/constant.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [posts, setPosts] = useState([]); // Array to store posts\n  // Declare state variables for form inputs\n  const [goalAmount, setGoalAmount] = useState(\"\");\n  const [minContribution, setMinContribution] = useState(\"\");\n  const [postId, setPostId] = useState(\"\");\n  const [fundAmount, setFundAmount] = useState(\"\");\n  useEffect(() => {\n    let isInitializing = false;\n    const init = async () => {\n      if (isInitializing) return;\n      isInitializing = true;\n      const {\n        ethereum\n      } = window;\n      if (!ethereum) {\n        console.error(\"MetaMask is not installed\");\n        isInitializing = false;\n        return;\n      }\n      try {\n        await ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.BrowserProvider(ethereum);\n        const signer = await provider.getSigner();\n        const contract = new ethers.Contract(contractAddress, contractAbi, signer);\n        setProvider(provider);\n        setSigner(signer);\n        setContract(contract);\n        setAccount(signer.address);\n\n        // Load all posts when the app initializes\n        await loadPosts(contract);\n      } catch (error) {\n        console.error('Error initializing Ethereum connection:', error);\n      } finally {\n        isInitializing = false;\n      }\n    };\n    init();\n  }, []);\n  const loadPosts = async contract => {\n    try {\n      const postCount = await contract.getPostCount();\n      const postsArray = [];\n      for (let i = 0; i < postCount; i++) {\n        const post = await contract.getPost(i);\n        postsArray.push({\n          id: i,\n          goalAmount: formatEther(post.goalAmount),\n          minContribution: formatEther(post.minContribution),\n          collectedFunds: formatEther(post.collectedFunds),\n          isActive: post.isActive\n        });\n      }\n      setPosts(postsArray);\n    } catch (err) {\n      console.error('Error loading posts:', err);\n    }\n  };\n  const createPost = async (goalAmount, minContribution) => {\n    if (!contract) return;\n    try {\n      const tx = await contract.createPost(parseEther(goalAmount), parseEther(minContribution));\n      await tx.wait();\n      console.log('Post created successfully!');\n      await loadPosts(contract); // Reload posts after creation\n    } catch (err) {\n      console.error('Error creating post:', err);\n    }\n  };\n  const fundPost = async (postId, amount) => {\n    if (!contract) return;\n    try {\n      const tx = await contract.fundPost(postId, {\n        value: parseEther(amount)\n      });\n      await tx.wait();\n      console.log('Funded post successfully!');\n      await loadPosts(contract); // Reload posts after funding\n    } catch (err) {\n      console.error('Error funding post:', err);\n    }\n  };\n  const getCollectedFunds = async postId => {\n    if (!contract) return;\n    try {\n      const collectedFunds = await contract.getCollectedFunds(postId);\n      console.log(`Collected funds: ${formatEther(collectedFunds)} ETH`);\n    } catch (err) {\n      console.error('Error getting collected funds:', err);\n    }\n  };\n  const handleCreatePost = e => {\n    e.preventDefault();\n    createPost(goalAmount, minContribution);\n  };\n  const handleFundPost = e => {\n    e.preventDefault();\n    fundPost(postId, fundAmount);\n  };\n  const handleGetCollectedFunds = e => {\n    e.preventDefault();\n    getCollectedFunds(postId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Crowdfunding DApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected account: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCreatePost,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Goal Amount (ETH)\",\n        value: goalAmount,\n        onChange: e => setGoalAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Minimum Contribution (ETH)\",\n        value: minContribution,\n        onChange: e => setMinContribution(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFundPost,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Post ID\",\n        value: postId,\n        onChange: e => setPostId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Fund Amount (ETH)\",\n        value: fundAmount,\n        onChange: e => setFundAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Fund Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleGetCollectedFunds,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Post ID\",\n        value: postId,\n        onChange: e => setPostId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Collected Funds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"All Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Post ID: \", post.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Goal Amount: \", post.goalAmount, \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Minimum Contribution: \", post.minContribution, \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Collected Funds: \", post.collectedFunds, \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", post.isActive ? 'Active' : 'Inactive']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"aOgxmM2RjqiEX+tCpagD1MRTSVs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","parseEther","formatEther","contractAbi","contractAddress","jsxDEV","_jsxDEV","App","_s","provider","setProvider","signer","setSigner","contract","setContract","account","setAccount","posts","setPosts","goalAmount","setGoalAmount","minContribution","setMinContribution","postId","setPostId","fundAmount","setFundAmount","isInitializing","init","ethereum","window","console","error","request","method","BrowserProvider","getSigner","Contract","address","loadPosts","postCount","getPostCount","postsArray","i","post","getPost","push","id","collectedFunds","isActive","err","createPost","tx","wait","log","fundPost","amount","value","getCollectedFunds","handleCreatePost","e","preventDefault","handleFundPost","handleGetCollectedFunds","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","target","map","index","_c","$RefreshReg$"],"sources":["C:/Users/Aly/Desktop/Crowdfunding/crowdfunding/crowdfunding-dapp/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers, parseEther, formatEther } from 'ethers';\nimport { contractAbi } from './Constant/constant.js';\nimport { contractAddress } from './Constant/constant.js';\n\nfunction App() {\n    const [provider, setProvider] = useState(null);\n    const [signer, setSigner] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [posts, setPosts] = useState([]);  // Array to store posts\n    // Declare state variables for form inputs\n    const [goalAmount, setGoalAmount] = useState(\"\");\n    const [minContribution, setMinContribution] = useState(\"\");\n    const [postId, setPostId] = useState(\"\");\n    const [fundAmount, setFundAmount] = useState(\"\");\n\n    useEffect(() => {\n        let isInitializing = false;\n    \n        const init = async () => {\n            if (isInitializing) return;\n            isInitializing = true;\n    \n            const { ethereum } = window;\n    \n            if (!ethereum) {\n                console.error(\"MetaMask is not installed\");\n                isInitializing = false;\n                return;\n            }\n    \n            try {\n                await ethereum.request({ method: 'eth_requestAccounts' });\n    \n                const provider = new ethers.BrowserProvider(ethereum);\n                const signer = await provider.getSigner();\n                const contract = new ethers.Contract(contractAddress, contractAbi, signer);\n    \n                setProvider(provider);\n                setSigner(signer);\n                setContract(contract);\n                setAccount(signer.address);\n\n                // Load all posts when the app initializes\n                await loadPosts(contract);\n            } catch (error) {\n                console.error('Error initializing Ethereum connection:', error);\n            } finally {\n                isInitializing = false;\n            }\n        };\n    \n        init();\n    }, []);\n\n    const loadPosts = async (contract) => {\n        try {\n            const postCount = await contract.getPostCount();\n            const postsArray = [];\n            for (let i = 0; i < postCount; i++) {\n                const post = await contract.getPost(i);\n                postsArray.push({\n                    id: i,\n                    goalAmount: formatEther(post.goalAmount),\n                    minContribution: formatEther(post.minContribution),\n                    collectedFunds: formatEther(post.collectedFunds),\n                    isActive: post.isActive,\n                });\n            }\n            setPosts(postsArray);\n        } catch (err) {\n            console.error('Error loading posts:', err);\n        }\n    };\n\n    const createPost = async (goalAmount, minContribution) => {\n        if (!contract) return;\n\n        try {\n            const tx = await contract.createPost(\n                parseEther(goalAmount),\n                parseEther(minContribution)\n            );\n            await tx.wait();\n            console.log('Post created successfully!');\n            await loadPosts(contract);  // Reload posts after creation\n        } catch (err) {\n            console.error('Error creating post:', err);\n        }\n    };\n\n    const fundPost = async (postId, amount) => {\n        if (!contract) return;\n\n        try {\n            const tx = await contract.fundPost(postId, {\n                value: parseEther(amount),\n            });\n            await tx.wait();\n            console.log('Funded post successfully!');\n            await loadPosts(contract);  // Reload posts after funding\n        } catch (err) {\n            console.error('Error funding post:', err);\n        }\n    };\n\n    const getCollectedFunds = async (postId) => {\n        if (!contract) return;\n\n        try {\n            const collectedFunds = await contract.getCollectedFunds(postId);\n            console.log(`Collected funds: ${formatEther(collectedFunds)} ETH`);\n        } catch (err) {\n            console.error('Error getting collected funds:', err);\n        }\n    };\n\n    const handleCreatePost = (e) => {\n        e.preventDefault();\n        createPost(goalAmount, minContribution);\n    };\n\n    const handleFundPost = (e) => {\n        e.preventDefault();\n        fundPost(postId, fundAmount);\n    };\n\n    const handleGetCollectedFunds = (e) => {\n        e.preventDefault();\n        getCollectedFunds(postId);\n    };\n\n    return (\n        <div>\n            <h1>Crowdfunding DApp</h1>\n            <p>Connected account: {account}</p>\n\n            <form onSubmit={handleCreatePost}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Goal Amount (ETH)\"\n                    value={goalAmount}\n                    onChange={(e) => setGoalAmount(e.target.value)}\n                />\n                <input\n                    type=\"text\"\n                    placeholder=\"Minimum Contribution (ETH)\"\n                    value={minContribution}\n                    onChange={(e) => setMinContribution(e.target.value)}\n                />\n                <button type=\"submit\">Create Post</button>\n            </form>\n\n            <form onSubmit={handleFundPost}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Post ID\"\n                    value={postId}\n                    onChange={(e) => setPostId(e.target.value)}\n                />\n                <input\n                    type=\"text\"\n                    placeholder=\"Fund Amount (ETH)\"\n                    value={fundAmount}\n                    onChange={(e) => setFundAmount(e.target.value)}\n                />\n                <button type=\"submit\">Fund Post</button>\n            </form>\n\n            <form onSubmit={handleGetCollectedFunds}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Post ID\"\n                    value={postId}\n                    onChange={(e) => setPostId(e.target.value)}\n                />\n                <button type=\"submit\">Get Collected Funds</button>\n            </form>\n\n            <h2>All Posts</h2>\n            <ul>\n                {posts.map((post, index) => (\n                    <li key={index}>\n                        <h3>Post ID: {post.id}</h3>\n                        <p>Goal Amount: {post.goalAmount} ETH</p>\n                        <p>Minimum Contribution: {post.minContribution} ETH</p>\n                        <p>Collected Funds: {post.collectedFunds} ETH</p>\n                        <p>Status: {post.isActive ? 'Active' : 'Inactive'}</p>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}