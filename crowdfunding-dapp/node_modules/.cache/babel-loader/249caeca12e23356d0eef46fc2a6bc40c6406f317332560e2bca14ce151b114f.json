{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aly\\\\Desktop\\\\Crowdfunding\\\\crowdfunding\\\\crowdfunding-dapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { contractAbi } from './Constant/constant.js';\nimport { contractAddress } from './Constant/constant.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  useEffect(() => {\n    const init = async () => {\n      const {\n        ethereum\n      } = window;\n      if (!ethereum) {\n        console.error(\"MetaMask is not installed\");\n        return;\n      }\n      try {\n        // Request account access if needed\n        await ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n\n        // Initialize ethers provider\n        const provider = new ethers.BrowserProvider(ethereum);\n        const signer = await provider.getSigner();\n        const contract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n        // Update state\n        setProvider(provider);\n        setSigner(signer);\n        setContract(contract);\n        setAccount(await signer.getAddress());\n      } catch (error) {\n        if (error.code === 4001) {\n          console.error(\"User rejected the request.\");\n        } else {\n          console.error('Error initializing Ethereum connection:', error);\n        }\n      }\n    };\n    init();\n  }, []);\n  const createPost = async (goalAmount, minContribution) => {\n    if (!contract) return;\n    try {\n      const tx = await contract.createPost(ethers.utils.parseEther(goalAmount),\n      // Using ethers.utils for v5 and v6 compatibility\n      ethers.utils.parseEther(minContribution));\n      await tx.wait();\n      console.log('Post created successfully!');\n    } catch (err) {\n      console.error('Error creating post:', err);\n    }\n  };\n  const fundPost = async (postId, amount) => {\n    if (!contract) return;\n    try {\n      const tx = await contract.fundPost(postId, {\n        value: ethers.utils.parseEther(amount)\n      });\n      await tx.wait();\n      console.log('Funded post successfully!');\n    } catch (err) {\n      console.error('Error funding post:', err);\n    }\n  };\n  const getCollectedFunds = async postId => {\n    if (!contract) return;\n    try {\n      const collectedFunds = await contract.getCollectedFunds(postId);\n      console.log(`Collected funds: ${ethers.utils.formatEther(collectedFunds)} ETH`);\n    } catch (err) {\n      console.error('Error getting collected funds:', err);\n    }\n  };\n  const [goalAmount, setGoalAmount] = useState('');\n  const [minContribution, setMinContribution] = useState('');\n  const [postId, setPostId] = useState('');\n  const [fundAmount, setFundAmount] = useState('');\n  const handleCreatePost = e => {\n    e.preventDefault();\n    createPost(goalAmount, minContribution);\n  };\n  const handleFundPost = e => {\n    e.preventDefault();\n    fundPost(postId, fundAmount);\n  };\n  const handleGetCollectedFunds = e => {\n    e.preventDefault();\n    getCollectedFunds(postId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Crowdfunding DApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected account: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCreatePost,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Goal Amount (ETH)\",\n        value: goalAmount,\n        onChange: e => setGoalAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Minimum Contribution (ETH)\",\n        value: minContribution,\n        onChange: e => setMinContribution(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFundPost,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Post ID\",\n        value: postId,\n        onChange: e => setPostId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Fund Amount (ETH)\",\n        value: fundAmount,\n        onChange: e => setFundAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Fund Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleGetCollectedFunds,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Post ID\",\n        value: postId,\n        onChange: e => setPostId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Collected Funds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"5uYKyar9dUOxVOYXlF/iujdM4xE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","contractAbi","contractAddress","jsxDEV","_jsxDEV","App","_s","provider","setProvider","signer","setSigner","contract","setContract","account","setAccount","init","ethereum","window","console","error","request","method","BrowserProvider","getSigner","Contract","getAddress","code","createPost","goalAmount","minContribution","tx","utils","parseEther","wait","log","err","fundPost","postId","amount","value","getCollectedFunds","collectedFunds","formatEther","setGoalAmount","setMinContribution","setPostId","fundAmount","setFundAmount","handleCreatePost","e","preventDefault","handleFundPost","handleGetCollectedFunds","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/Aly/Desktop/Crowdfunding/crowdfunding/crowdfunding-dapp/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { contractAbi } from './Constant/constant.js';\nimport { contractAddress } from './Constant/constant.js';\n\nfunction App() {\n    const [provider, setProvider] = useState(null);\n    const [signer, setSigner] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [account, setAccount] = useState(null);\n\n    useEffect(() => {\n        const init = async () => {\n            const { ethereum } = window;\n\n            if (!ethereum) {\n                console.error(\"MetaMask is not installed\");\n                return;\n            }\n\n            try {\n                // Request account access if needed\n                await ethereum.request({ method: 'eth_requestAccounts' });\n                \n                // Initialize ethers provider\n                const provider = new ethers.BrowserProvider(ethereum);\n                const signer = await provider.getSigner();\n                const contract = new ethers.Contract(contractAddress, contractAbi, signer);\n\n                // Update state\n                setProvider(provider);\n                setSigner(signer);\n                setContract(contract);\n                setAccount(await signer.getAddress());\n            } catch (error) {\n                if (error.code === 4001) {\n                    console.error(\"User rejected the request.\");\n                } else {\n                    console.error('Error initializing Ethereum connection:', error);\n                }\n            }\n        };\n\n        init();\n    }, []);\n\n    const createPost = async (goalAmount, minContribution) => {\n        if (!contract) return;\n\n        try {\n            const tx = await contract.createPost(\n                ethers.utils.parseEther(goalAmount),  // Using ethers.utils for v5 and v6 compatibility\n                ethers.utils.parseEther(minContribution)\n            );\n            await tx.wait();\n            console.log('Post created successfully!');\n        } catch (err) {\n            console.error('Error creating post:', err);\n        }\n    };\n\n    const fundPost = async (postId, amount) => {\n        if (!contract) return;\n\n        try {\n            const tx = await contract.fundPost(postId, {\n                value: ethers.utils.parseEther(amount),\n            });\n            await tx.wait();\n            console.log('Funded post successfully!');\n        } catch (err) {\n            console.error('Error funding post:', err);\n        }\n    };\n\n    const getCollectedFunds = async (postId) => {\n        if (!contract) return;\n\n        try {\n            const collectedFunds = await contract.getCollectedFunds(postId);\n            console.log(`Collected funds: ${ethers.utils.formatEther(collectedFunds)} ETH`);\n        } catch (err) {\n            console.error('Error getting collected funds:', err);\n        }\n    };\n\n    const [goalAmount, setGoalAmount] = useState('');\n    const [minContribution, setMinContribution] = useState('');\n    const [postId, setPostId] = useState('');\n    const [fundAmount, setFundAmount] = useState('');\n\n    const handleCreatePost = (e) => {\n        e.preventDefault();\n        createPost(goalAmount, minContribution);\n    };\n\n    const handleFundPost = (e) => {\n        e.preventDefault();\n        fundPost(postId, fundAmount);\n    };\n\n    const handleGetCollectedFunds = (e) => {\n        e.preventDefault();\n        getCollectedFunds(postId);\n    };\n\n    return (\n        <div>\n            <h1>Crowdfunding DApp</h1>\n            <p>Connected account: {account}</p>\n\n            <form onSubmit={handleCreatePost}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Goal Amount (ETH)\"\n                    value={goalAmount}\n                    onChange={(e) => setGoalAmount(e.target.value)}\n                />\n                <input\n                    type=\"text\"\n                    placeholder=\"Minimum Contribution (ETH)\"\n                    value={minContribution}\n                    onChange={(e) => setMinContribution(e.target.value)}\n                />\n                <button type=\"submit\">Create Post</button>\n            </form>\n\n            <form onSubmit={handleFundPost}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Post ID\"\n                    value={postId}\n                    onChange={(e) => setPostId(e.target.value)}\n                />\n                <input\n                    type=\"text\"\n                    placeholder=\"Fund Amount (ETH)\"\n                    value={fundAmount}\n                    onChange={(e) => setFundAmount(e.target.value)}\n                />\n                <button type=\"submit\">Fund Post</button>\n            </form>\n\n            <form onSubmit={handleGetCollectedFunds}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Post ID\"\n                    value={postId}\n                    onChange={(e) => setPostId(e.target.value)}\n                />\n                <button type=\"submit\">Get Collected Funds</button>\n            </form>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}